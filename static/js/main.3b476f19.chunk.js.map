{"version":3,"sources":["NavBar.tsx","HomePage.tsx","components/Loader/Loader.tsx","api.ts","types/ErrorType.ts","PersonLink.tsx","PeoplesTable.tsx","PeoplePage.tsx","NotFoundPage.tsx","App.tsx","index.tsx"],"names":["NavBar","className","role","to","isActive","classNames","HomePage","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","ErrorType","PersonLink","person","name","sex","born","died","motherName","fatherName","mother","father","slug","personSlug","useParams","PeoplesTable","people","map","PeoplePage","useState","setPeople","isLoading","setIsLoading","error","setError","loadPeople","useCallback","peopleWithParentsInfo","find","p","length","noPeopleOnServer","responseError","useEffect","NotFoundPage","App","path","element","replace","index","createRoot","document","getElementById","render"],"mappings":"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","file":"static/js/main.3b476f19.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nexport const NavBar = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <NavLink\n          to=\"/\"\n          className={({ isActive }) => classNames('navbar-item', {\n            'has-background-grey-lighter': isActive,\n          })}\n        >\n          Home\n        </NavLink>\n\n        <NavLink\n          to=\"/people\"\n          className={({ isActive }) => classNames('navbar-item', {\n            'has-background-grey-lighter': isActive,\n          })}\n        >\n          People\n        </NavLink>\n      </div>\n    </div>\n  </nav>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export enum ErrorType {\n  noPeopleOnServer = 'noPeopleOnServer',\n  responseError = 'responseError',\n}\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Link, useParams } from 'react-router-dom';\nimport { Person } from './types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = ({ person }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    motherName,\n    fatherName,\n    mother,\n    father,\n    slug,\n  } = person;\n\n  const { personSlug } = useParams();\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': personSlug === slug,\n      })}\n    >\n      <td>\n        <Link\n          to={`/people/${slug}`}\n          className={classNames({\n            'has-text-danger': sex === 'f',\n          })}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      {motherName && mother ? (\n        <td>\n          <Link to={`/people/${mother.slug}`} className=\"has-text-danger\">\n            {motherName}\n          </Link>\n        </td>\n      ) : (\n        <td>{motherName || '-'}</td>\n      )}\n\n      {fatherName && father ? (\n        <td>\n          <Link to={`/people/${father.slug}`}>{fatherName}</Link>\n        </td>\n      ) : (\n        <td>{fatherName || '-'}</td>\n      )}\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Person } from './types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeoplesTable: React.FC<Props> = ({ people }) => {\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map((person) => (\n          <PersonLink\n            key={person.slug}\n            person={person}\n          />\n        ))}\n      </tbody>\n\n    </table>\n  );\n};\n","import { useCallback, useEffect, useState } from 'react';\nimport { Loader } from './components/Loader';\nimport { getPeople } from './api';\nimport { Person } from './types';\nimport { ErrorType } from './types/ErrorType';\nimport { PeoplesTable } from './PeoplesTable';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<ErrorType | null>(null);\n\n  const loadPeople = useCallback(async () => {\n    setIsLoading(true);\n    try {\n      const response = await getPeople();\n\n      const peopleWithParentsInfo = response.map((person) => {\n        const mother = response.find(p => p.name === person.motherName);\n        const father = response.find(p => p.name === person.fatherName);\n\n        return {\n          ...person,\n          mother,\n          father,\n        };\n      });\n\n      setIsLoading(false);\n      if (response.length === 0) {\n        setError(ErrorType.noPeopleOnServer);\n      }\n\n      setPeople(peopleWithParentsInfo);\n    } catch {\n      setIsLoading(false);\n      setError(ErrorType.responseError);\n    }\n  }, []);\n\n  useEffect(() => {\n    loadPeople();\n  }, [loadPeople]);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {error === ErrorType.responseError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {error === ErrorType.noPeopleOnServer && (\n            <p data-cy=\"noPeopleMessage\">\n              There are no people on the server\n            </p>\n          )}\n\n          {!error && (\n            <PeoplesTable\n              people={people}\n            />\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Not Found Page</h1>\n);\n","import { Navigate, Route, Routes } from 'react-router-dom';\nimport './App.scss';\nimport { NavBar } from './NavBar';\nimport { HomePage } from './HomePage';\nimport { PeoplePage } from './PeoplePage';\nimport { NotFoundPage } from './NotFoundPage';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <NavBar />\n\n    <main className=\"section\">\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<HomePage />} />\n          <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":personSlug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route path=\"*\" element={<NotFoundPage />} />\n        </Routes>\n      </div>\n    </main>\n  </div>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}